name: setup-nix
description: Setup Nix with optional disk space optimization and cachix binary cache configuration

inputs:
  installer:
    description: |
      Nix installation strategy:
      - 'full' (default): Aggressive disk cleanup + DeterminateSystems installer
      - 'quick': Lightweight install with nixbuild/nix-quick-install-action
    type: string
    required: false
    default: full
  system:
    description: Nix system to configure (e.g., x86_64-linux, aarch64-darwin)
    type: string
    required: false
    default: x86_64-linux
  extra-conf:
    description: Additional nix.conf configuration
    type: string
    required: false
    default: system-features = nixos-test benchmark big-parallel kvm
  setup-cachix:
    description: Setup cachix binary cache after Nix installation (requires SOPS_AGE_KEY in env)
    type: boolean
    required: false
    default: false
  cachix-auth:
    description: Authenticate with cachix for pushing (requires setup-cachix=true)
    type: boolean
    required: false
    default: false

runs:
  using: composite
  steps:
    # Full installer: Aggressive disk cleanup + DeterminateSystems
    - name: Reclaim disk space (Linux)
      if: runner.os == 'Linux' && inputs.installer == 'full'
      uses: wimpysworld/nothing-but-nix@main
      with:
        hatchet-protocol: rampage

    - name: Reclaim disk space (macOS)
      if: runner.os == 'macOS' && inputs.installer == 'full'
      shell: bash
      run: |
        echo "::group::Disk space before cleanup"
        sudo df -h
        echo "::endgroup::"

        echo "::group::Disable Spotlight indexing"
        sudo mdutil -i off -a || echo "mdutil failed"
        sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist \
          || echo "launchctl unload failed"
        echo "::endgroup::"

        echo "Starting background cleanup to reclaim disk space..."
        sudo rm -rf \
          /Applications/Xcode_* \
          /Library/Developer/CoreSimulator \
          /Library/Frameworks \
          /Users/runner/.dotnet \
          /Users/runner/.rustup \
          /Users/runner/Library/Android \
          /Users/runner/Library/Caches \
          /Users/runner/Library/Developer/CoreSimulator \
          /Users/runner/hostedtoolcache &

    - name: Install Nix (DeterminateSystems)
      if: inputs.installer == 'full'
      uses: DeterminateSystems/nix-installer-action@main
      with:
        extra-conf: |
          system = ${{ inputs.system }}
          ${{ inputs.extra-conf }}

    # Quick installer: Lightweight nixbuild/nix-quick-install-action
    - name: Install Nix (Quick Install)
      if: inputs.installer == 'quick'
      uses: nixbuild/nix-quick-install-action@master

    - name: Report disk space (macOS post-cleanup)
      if: runner.os == 'macOS' && inputs.installer == 'full'
      uses: srz-zumix/post-run-action@v2
      with:
        shell: bash -e {0}
        post-run: |
          echo "::group::Disk space after workflow"
          sudo df -h
          echo "::endgroup::"

    - name: Setup and authenticate cachix
      if: inputs.setup-cachix == 'true' && inputs.cachix-auth == 'true'
      shell: bash
      run: |
        nix develop -c sops exec-env vars/shared.yaml '
          cachix authtoken "$CACHIX_AUTH_TOKEN"
          cachix use "$CACHIX_CACHE_NAME"
          cachix use nix-community
        '

    - name: Setup cachix for binary cache
      if: inputs.setup-cachix == 'true' && inputs.cachix-auth != 'true'
      shell: bash
      run: |
        nix develop -c sops exec-env vars/shared.yaml '
          cachix use "$CACHIX_CACHE_NAME"
          cachix use nix-community
        '
